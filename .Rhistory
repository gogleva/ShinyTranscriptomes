?strsplit
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
biocLite("AnnotationDbi")
library("AnnotationDbi")
library("AnnotationDbi")
shiny::runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
library(topGO)
library(topGO)
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
?downloadButton
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
output$GOtable <- renderDataTable({
print(class(input$GOgenes))
parsed_GOgenes <- unlist(strsplit(input$GOgenes, '\n'))
print(parsed_GOgenes)
GOterm = (mapIds(org.At.tair.db,
keys = parsed_GOgenes,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
flatGO <- sapply(GOterm,function(x) paste(unlist(x),collapse="\n"))
my_table <- data.frame(gene_ID = parsed_GOgenes,
GO_term = flatGO,
description = mapIds(org.At.tair.db,
keys = parsed_GOgenes,
column = "GENENAME",
keytype = "TAIR",
multiVals = "first")
)
}, options=list(aLengthMenu=c(10,30,50),iDisplayLength=10, scrollX=TRUE))
output$GOtable <- renderDataTable({
print(class(input$GOgenes))
parsed_GOgenes <- unlist(strsplit(input$GOgenes, '\n'))
print(parsed_GOgenes)
GOterm = (mapIds(org.At.tair.db,
keys = parsed_GOgenes,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
flatGO <- sapply(GOterm,function(x) paste(unlist(x),collapse="\n"))
my_table <- data.frame(gene_ID = parsed_GOgenes,
GO_term = flatGO,
description = mapIds(org.At.tair.db,
keys = parsed_GOgenes,
column = "GENENAME",
keytype = "TAIR",
multiVals = "first")
)
}, options=list(aLengthMenu=c(10,30,50),iDisplayLength=10, scrollX=TRUE))
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
library(GO.db)
geneOntology
getOntology
?getOntology
library("annotate")
library("hgu95av2.db")
bb <- hgu95av2GO[["39613_at"]]
biocLite("hgu95av2.db")
source("http://bioconductor.org/biocLite.R")
biocLite("hgu95av2.db")
library("hgu95av2.db")
bb <- hgu95av2GO[["39613_at"]]
bb
class(bb)
getOntology(bb)
?getOntology
getOntology(bb, ontology = 'BP')
getOntology(bb, ontology = 'CC')
getOntology(bb, ontology = 'MF')
runApp('anna/Labjournal/hackathon')
GO_list <- c("GO:0004601", "GO:0004601", "GO:0005576", "GO:0005783", "GO:0006826", "GO:0009269", "GO:0009409", "GO:0010054", "GO:0010106", "GO:0010167", "GO:0015706", "GO:0016132", "GO:0042538")
getOntology(GO_list)
getOntology(GO_list, ontology = "CC")
GOTERM$"GO:0003700"
GOTERM$"GO:0003700"$Ontology
class(GOTERM$"GO:0003700")
GO_list
sapply(GO_list, function(x) x$Ontology)
sapply(GO_list, function(x) GOTERM$x)
class(GOTERM$"GO:0004601")
GOTERM$"GO:0004601"
sapply(GO_list, function(x) GOTERM$"x")
sapply(GO_list, function(x) GOTERM$as.character(x))
ll1 = hgu95av2GO[["39613_at"]]
ll1
Ontology(GOTERM$"GO:0004601")
names(GO_list)
ls("package:org.At.tair.db")
org.At.tairGO2TAIR
org.At.tairGO
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
org.At.tairGO
get("AT1G07180", env=org.At.tairGO)
class(get("AT1G07180", env=org.At.tairGO))
Ontology(get("AT1G07180", env=org.At.tairGO))
get("AT1G07180", env=org.At.tairGO)
?getOntology
getOntology(get("AT1G07180", env=org.At.tairGO))
getOntology(get("AT1G07180", env=org.At.tairGO), ontology = 'BP')
getOntology(get("AT1G07180", env=org.At.tairGO), ontology = 'MF')
getOntology(get("AT1G07180", env=org.At.tairGO), ontology = 'CC')
ls("package:GO.db")
GO
COMFPARENTS
GOCCPARENTS
GO
GOTERM
$`1004_at`$`GO:0032467`$Ontology
mget(names(get("738_at", hgu95av2GO)), GOTERM)
names(get("738_at", hgu95av2GO))
class(names(get("738_at", hgu95av2GO)))
class(GO_list)
names(get("738_at", hgu95av2GO))
mget(names(get("738_at", hgu95av2GO)), GOTERM)
Otology(mget(names(get("738_at", hgu95av2GO)), GOTERM))
class(mget(names(get("738_at", hgu95av2GO)), GOTERM)
)
(mget(names(get("738_at", hgu95av2GO)), GOTERM)
)
(mget(GO_list, GOTERM)
)
r1 <- (mget(GO_list, GOTERM))
r1
class(r1)
r1[1]
class(r1[1])
r1[1]$Ontology]
r1[1]$Ontology
r1[1][1]
r1[[1]]
length(r1[1][1])
length(r1[[1]])
length(r1[[1]])
ulist(r1[[1]])
unlist(r1[[1]])
class(unlist(r1[[1]]))
?GOTerms
gonode <- new("GOTerms", GOID="GO:1234567", Term="Test", Ontology="MF",
Definition="just for testing")
GOID(gonode)
Ontology(gonode)
Ontology(r1)
Ontology(r1[1])
Ontology(r1[[1]])
r1
r1
class(r1)
class(r1[[1]])
(mget(GO_list, Ontology)
)
r1 <- (mget(GO_list, GOTERM))
r1
getOntology(r1)
Ontology(r1[[1]])
r1 <- (mget(GO_list, GOTERM))
Ontology("GO:0004601")
sapply(GO_list, Ontology)
GO_list <- c("GO:0004601", "GO:0004601", "GO:0005576", "GO:0005783", "GO:0006826", "GO:0009269", "GO:0009409", "GO:0010054", "GO:0010106", "GO:0010167", "GO:0015706", "GO:0016132", "GO:0042538")
sapply(GO_list, Ontology)
all_ont <- sapply(GO_list, Ontology)
all_ont
all_ont = BP
all_ont = 'BP'
all_ont
all_ont <- sapply(GO_list, Ontology)
which(all_ont == 'BP')
all_ont
all_ont[which(all_ont == 'BP')]
show_terms <- all_ont[which(all_ont == 'BP')]
all_ont[which(all_ont == 'CC')]
all_ont[which(all_ont == 'MF')]
GO_list <- c("GO:0004601", "GO:0004601", "GO:0005576", "GO:0005783", "GO:0006826", "GO:0009269", "GO:0009409", "GO:0010054", "GO:0010106", "GO:0010167", "GO:0015706", "GO:0016132", "GO:0042538")
all_ont <- sapply(GO_list, Ontology)
all_ont
names(all_ont)
all_ont <- lapply(GO_list, Ontology)
all_ont
show_terms <- all_ont[which(all_ont == 'BP')]
show_terms
names(show_terms)
unlist(show_terms)
names(unlist(show_terms))
GO_list <- c("GO:0004601", "GO:0004601", "GO:0005576", "GO:0005783", "GO:0006826", "GO:0009269", "GO:0009409", "GO:0010054", "GO:0010106", "GO:0010167", "GO:0015706", "GO:0016132", "GO:0042538")
all_ont <- lapply(GO_list, Ontology)
show_terms <- names(unlist(all_ont[which(all_ont == 'BP')]))
show_terms
parsed_GOgenes <- c("AT1G04530", "AT1G04770", "AT1G05260", "AT1G06000", "AT1G06080", "AT1G06180", "AT1G07150", "AT1G07180", "AT1G08090", "AT1G08280", "AT1G08300", "AT1G08580", "AT1G08650")
GOterm = (mapIds(org.At.tair.db,
keys = parsed_GOgenes,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
flatGO <- sapply(GOterm,function(x) paste(unlist(x),collapse="\n"))
flatGO
class(flatGO)
flatGO[1]
flatGO[2]
flatGO[3]
strsplit(flatGO[3], '\n')
sapply(flatGO, strsplit('\n'))
sapply(flatGO, strsplit())
sapply(flatGO, strsplit)
sapply(flatGO, strsplit, '\n')
class(sapply(flatGO, strsplit, '\n'))
function <- filterOntology(GO_list, sub){
all_ont <- lapply(GO_list, Ontology)
show_terms <- names(unlist(all_ont[which(all_ont == sub)]))
}
function <- filterOntology(GO_list, sub){
all_ont <- lapply(GO_list, Ontology)
show_terms <- names(unlist(all_ont[which(all_ont == sub)]))
}
filterOntology <- function(GO_list, sub){
all_ont <- lapply(GO_list, Ontology)
show_terms <- names(unlist(all_ont[which(all_ont == sub)]))
}
GO_list_1 <- c("GO:0004601", "GO:0004601", "GO:0005576", "GO:0005783", "GO:0006826", "GO:0009269", "GO:0009409", "GO:0010054", "GO:0010106", "GO:0010167", "GO:0015706", "GO:0016132", "GO:0042538")
filterOntology <- function(GO_list, sub){
all_ont <- lapply(GO_list, Ontology)
show_terms <- names(unlist(all_ont[which(all_ont == sub)]))
}
filterOntology(GO_list_1, 'BP')
filterOntology <- function(GO_list, sub){
all_ont <- lapply(GO_list, Ontology)
show_terms <- names(unlist(all_ont[which(all_ont == sub)]))
return(show_terms)
}
filterOntology(GO_list_1, 'BP')
filterOntology(GO_list_1, 'MF')
filterOntology(GO_list_1, 'CC')
flatGO <- sapply(GOterm,function(x) paste(unlist(x),collapse="\n"))
sapply(flatGO, strsplit, '\n')
list2 <- sapply(flatGO, strsplit, '\n')
sapply(list2, filterOntology, 'CC')
sapply(list2, filterOntology, 'BP')
sapply(list2, filterOntology, 'MF')
filtered_terms <- sapply(list2, filterOntology, 'MF')
filtered_terms <- sapply(list2, filterOntology, 'MF')
unlist(filtered_terms)
unlist(filtered_terms)
filtered_terms <- sapply(list2, filterOntology, 'BP')
unlist(filtered_terms)
flatGO <- sapply(filtered_terms,function(x) paste(unlist(x),collapse="\n"))
flatGO
flatGO[1]
flatGO[2]
flatGO[3]
flatGO[4]
flatGO[5]
runApp('anna/Labjournal/hackathon')
Ontology(GO:0010497 )
GOTERM$'GO:0010497'
runApp('anna/Labjournal/hackathon')
GOTERM$'GO:0003674'
GOterm
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
GOTERM$"GO:0009507"
runApp('anna/Labjournal/hackathon')
?renderDataTable
GOterm = (mapIds(org.At.tair.db,
keys = parsed_GOgenes,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
runApp('anna/Labjournal/hackathon')
filterOntology()
filterOntology
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/shiny_tests/dummy_tests')
runApp('anna/Labjournal/shiny_tests/dummy_tests')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/shiny_tests/dummy_tests')
runApp('anna/Labjournal/shiny_tests/dummy_tests')
runApp('anna/Labjournal/shiny_tests/dummy_tests')
runApp('anna/Labjournal/shiny_tests/dummy_tests')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
?numericInput
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
tabPanel("GO enrichment",
sidebarLayout(
sidebarPanel(
textAreaInput(inputId = "GOgenes",
label = "Input gene list",
placeholder = 'Paste list of gene ids',
height = '200px'),
actionButton(inputId = "GOsubmitButton",
"Submit", icon = icon("flash"),
width = NULL,
style="color: #fff; background-color: #337ab7; border-color: #2e6da4"),
hr(),
selectInput(inputId = "subOntology",
"Select subontology",
choices = c('biological process',
'molecular function',
'cellular localisation')),
selectInput(inputId = "GOmethod", "Select method for enrichment analysis",
choices = c('fisher', 'ks', 't', 'globaltest', 'sum')),
numericInput(inputId = "GOpvalue", "Specify FDR", 0.05)
),
mainPanel(
downloadButton('GOdownload', 'Download GO annotations'),
tabsetPanel(
tabPanel("Table", dataTableOutput('GOtable')),
tabPanel("Plot1"),
tabPanel("Plot2"))
)))
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
?readMappings
parsed_GOgenes <- unlist(strsplit(input$GOgenes, '\n'))
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
GOterm = (mapIds(org.At.tair.db,
keys = GOgenes,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
GOgenes <- c("AT1G03850", "AT1G03860", "AT1G04400", "AT1G04520", "AT1G04530", "AT1G04770", "AT1G05260", "AT1G06000", "AT1G06080", "AT1G06180", "AT1G07150", "AT1G07180", "AT1G08090", "AT1G08280", "AT1G08300", "AT1G08580", "AT1G08650", "AT1G08720", "AT1G08890", "AT1G09210", "AT1G09240", "AT1G09350", "AT1G09560", "AT1G09780", "AT1G10050", "AT1G10060", "AT1G10090", "AT1G10230", "AT1G10370", "AT1G10380", "AT1G10490", "AT1G11100", "AT1G11410", "AT1G12090", "AT1G12370", "AT1G12560", "AT1G12740", "AT1G12780", "AT1G13080", "AT1G13300", "AT1G13510", "AT1G14350", "AT1G14360", "AT1G14540", "AT1G14700", "AT1G15670", "AT1G15740", "AT1G16370", "AT1G16510", "AT1G17340", "AT1G17380", "AT1G17420", "AT1G17620", "AT1G18150", "AT1G18210", "AT1G18330", "AT1G18540", "AT1G18660", "AT1G18710", "AT1G18850", "AT1G19180", "AT1G19200", "AT1G19530", "AT1G19660", "AT1G19900", "AT1G20190", "AT1G20450", "AT1G21110", "AT1G21120", "AT1G21350", "AT1G21540", "AT1G21550", "AT1G22070", "AT1G22370", "AT1G22500", "AT1G22570", "AT1G22640", "AT1G23180", "AT1G23390", "AT1G23870", "AT1G24100", "AT1G24148", "AT1G24280", "AT1G25230", "AT1G26380", "AT1G26440", "AT1G26730", "AT1G26770", "AT1G27090", "AT1G27350", "AT1G27730", "AT1G27760", "AT1G27770", "AT1G27930", "AT1G28010", "AT1G28130", "AT1G28260", "AT1G28380", "AT1G28600", "AT1G28610", "AT1G28670", "AT1G28680", "AT1G29720", "AT1G29910", "AT1G29930", "AT1G30070", "AT1G30370", "AT1G30500", "AT1G30520", "AT1G30720", "AT1G31230", "AT1G31280", "AT1G31580", "AT1G32090", "AT1G32170", "AT1G32200", "AT1G32240", "AT1G32260", "AT1G32400", "AT1G32440", "AT1G32540", "AT1G32780", "AT1G33055", "AT1G33780", "AT1G35660", "AT1G43800", "AT1G44100", "AT1G44350", "AT1G47490", "AT1G47530", "AT1G48650", "AT1G48700", "AT1G48850", "AT1G49130", "AT1G49320", "AT1G50590", "AT1G51420", "AT1G51680", "AT1G51760", "AT1G51800", "AT1G51805", "AT1G52560", "AT1G53210", "AT1G53510", "AT1G53730", "AT1G54890", "AT1G55110", "AT1G55120", "AT1G56070", "AT1G56300", "AT1G56610", "AT1G56650", "AT1G56660", "AT1G56670", "AT1G58030", "AT1G58270", "AT1G58602", "AT1G58807", "AT1G59124", "AT1G59865", "AT1G60140", "AT1G60470", "AT1G61730", "AT1G61800", "AT1G61840", "AT1G62320", "AT1G62510", "AT1G62520", "AT1G62560", "AT1G62780", "AT1G63090", "AT1G63220", "AT1G63670", "AT1G63690", "AT1G63750", "AT1G63860", "AT1G63880", "AT1G63940", "AT1G64170", "AT1G64200", "AT1G64390", "AT1G64400", "AT1G64720", "AT1G64760", "AT1G65040", "AT1G65060", "AT1G65390", "AT1G65690", "AT1G65860", "AT1G65980", "AT1G66080", "AT1G66090", "AT1G66270", "AT1G66700", "AT1G67090", "AT1G67325", "AT1G67800", "AT1G68130", "AT1G68150", "AT1G68190", "AT1G68390", "AT1G68740", "AT1G69530", "AT1G69840", "AT1G71890", "AT1G72416", "AT1G72450", "AT1G72490", "AT1G72520", "AT1G72820", "AT1G73010", "AT1G73260", "AT1G73730", "AT1G73805", "AT1G74080", "AT1G74330", "AT1G74430", "AT1G74810", "AT1G74950", "AT1G75040", "AT1G75380", "AT1G75750", "AT1G75990", "AT1G76080", "AT1G76240", "AT1G76360", "AT1G77080", "AT1G77330", "AT1G77850", "AT1G78080", "AT1G78150", "AT1G78570", "AT1G79150", "AT1G79320", "AT1G79340", "AT1G79840", "AT1G79920", "AT1G80130", "AT1G80180", "AT1G80440", "AT1G80920", "AT2G01100", "AT2G01220", "AT2G01250", "AT2G01670", "AT2G01870", "AT2G01990", "AT2G02120", "AT2G02630", "AT2G02770", "AT2G02780", "AT2G02810", "AT2G03090", "AT2G03890", "AT2G04030", "AT2G11810", "AT2G13790", "AT2G14750", "AT2G15890", "AT2G16430", "AT2G16500", "AT2G16660", "AT2G16720", "AT2G16890", "AT2G17840", "AT2G17900", "AT2G18480", "AT2G18690", "AT2G18700", "AT2G18770", "AT2G18940")
GOterm = (mapIds(org.At.tair.db,
keys = GOgenes,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
x <- org.At.tairARACYC
x
ls(org.At.tairARACYC)
ls(org.At.tair.db)
ls(packageName = org.At.tair.db)
ls("org.At.tair.db")
ls("AnnotationDbi")
library("AnnotationDbi")
library("org.At.tair.db")
library("topGO")
library("org.At.tair.db")
ls("AnnotationDbi")
ls("AnnotationDbi")
library("package:org.At.tair.db")
ls("package:hgu95av2.db")
library("org.At.tair.db")
ls("package:org.At.tair.db")
org.At.tairGO
ls(org.At.tairGO)
ls(org.At.GO2tair)
ls(org.At.GO2TAIR)
ls(org.At.tairGO2TAIR)
length(org.At.tairGO2TAIR)
length(org.At.GO2TAIR)
ls(org.At.GO2tair)
ls(org.At.tairGO)
length(ls(org.At.tairGO))
GOterm = (mapIds(org.At.tair.db,
keys = GOgenes,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
GOterm
ls(org.At.tairGO)
ls("package:org.At.tair.db")
ls(org.At.tair)
org.At.tair
?org.At.tair
columns(org.At.tair)
org.At.tair("AT1G03850")
columns(org.At.tair.db)
?select
keys(org.At.tair.db)
keys(org.At.tair.db)
all_TAIR <- keys(org.At.tair.db)
GOterm = (mapIds(org.At.tair.db,
keys = all_TAIR,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
GOterm
runApp('anna/Labjournal/hackathon')
all_TAIR <- keys(org.At.tair.db)
GOterm = (mapIds(org.At.tair.db,
keys = all_TAIR,
column = "GO",
keytype = "TAIR",
multiVals = "CharacterList"))
GOterm
geneUniverse <- names(GOterm)
geneUniverse
genesOfInterest <- read.table("/home/anna/anna/Labjournal/shiny_tests/genes_of_interest.txt",
header=FALSE)
genesOfInterest <- as.character(genesOfInterest$V1)
genesOfInterest
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
geneList
GOTERM
GOterm
flatGO <- sapply(GOterm,function(x) paste(unlist(x),collapse=", "))
flatGO
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
GOTerm
GOterm
r1 <- [["AT1G01010"]] GO:0003700 GO:0005634 GO:0006888 GO:0007275 GO:0043090
GOterm[1]
GOterm[[1]]
flatGO <- sapply(GOterm,function(x) paste(unlist(x),collapse=", "))
flatGO
unname(flatGO)
class(unname(flatGO))
mappedGO <- unname(flatGO)
data.frame(geneUniverse, mappedGO)
df1 <- data.frame(geneUniverse, mappedGO)
df1
View(df1)
geneID2GO <- data.frame(geneUniverse, mappedGO)
myGOdata <- new("topGOdata",
description="My project",
ontology="BP",
allGenes=geneList,
annot = annFUN.gene2GO,
gene2GO = geneID2GO)
geneID2GO
is.na(geneID2GO)
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/genes_of_interest.txt")
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go")
head(geneID2GO)
View(head(geneID2GO))
geneID2GO <- data.frame(geneUniverse, mappedGO, header = FALSE)
View(head(geneID2GO))
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go",
quote = FALSE)
?write.table
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go",
quote = FALSE, row.names = FALSE)
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go",
quote = FALSE, row.names = FALSE)
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go",
quote = FALSE)
geneID2GO <- data.frame(geneUniverse, mappedGO)
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go",
quote = FALSE)
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go",
quote = FALSE, row.names = FALSE)
write.table(geneID2GO, "/home/anna/anna/Labjournal/shiny_tests/id2go",
quote = FALSE, row.names = FALSE, sep = '\t')
geneID2GO <- readMappings(file = "/home/anna/anna/Labjournal/shiny_tests/id2go")
geneID2GO
geneList <- factor(as.integer(geneUniverse %in% genesOfInterest))
names(geneList) <- geneUniverse
myGOdata <- new("topGOdata",
description="My project",
ontology="BP",
allGenes=geneList,
annot = annFUN.gene2GO,
gene2GO = geneID2GO)
resultFisher <- runTest(myGOdata, algorithm="classic", statistic="fisher")
allRes <- GenTable(myGOdata, classicFisher = resultFisher, orderBy = "resultFisher", ranksOf = "classicFisher", topNodes = 10)
allRes
?readMappings
sampleGOdata <- new("topGOdata",
description = "Simple session", ontology = "BP",
allGenes = geneList,
nodeSize = 10,
annot = annFUN.db
)
affyLib <- paste(annotation(ALL), "db", sep = ".")
afyyLi
afyyLib
affyLib
getwd()
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
runApp('anna/Labjournal/hackathon')
