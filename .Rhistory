library(shiny)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sidebarLayout
runApp()
?renderPlot
runApp()
?analyzeDataReactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tibble)
library("MatrixModels", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("matrixStats", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
iris
transformData(iris, vars=-5,transMethod="log2")
transformData <- function(x,vars=-1,transMethod){
if (transMethod=="none") {
return(x)
} else if (transMethod=="log2") {
x_vars <- log2(x[,vars])
x_remain <- x[,-vars]
return(cbind(x_remain,x_vars))
} else if (transMethod=="zscore") {
x_vars <- x[,vars]
x_remain <- x[,-vars]
x_zscore <- (x_vars-rowMeans(x_vars))/apply(x_vars,1,sd)
}
}
transformData(iris, vars=-5,transMethod="log2")
head(transformData(iris, vars=-5,transMethod="zscore"))
head(transformData(iris, vars=-5,transMethod="log2"))
head(transformData(iris, vars=-5,transMethod="none"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(heatmaply)
install.packages('heatmaply')
library(heatmaply)
runApp()
runApp()
runApp()
runApp()
runApp()
?heatmaply
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
